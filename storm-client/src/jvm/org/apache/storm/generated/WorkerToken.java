/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class WorkerToken implements org.apache.thrift.TBase<WorkerToken, WorkerToken._Fields>, java.io.Serializable, Cloneable, Comparable<WorkerToken> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkerToken");

  private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkerTokenStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkerTokenTupleSchemeFactory());
  }

  private WorkerTokenServiceType serviceType; // required
  private ByteBuffer info; // required
  private ByteBuffer signature; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see WorkerTokenServiceType
     */
    SERVICE_TYPE((short)1, "serviceType"),
    INFO((short)2, "info"),
    SIGNATURE((short)3, "signature");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_TYPE
          return SERVICE_TYPE;
        case 2: // INFO
          return INFO;
        case 3: // SIGNATURE
          return SIGNATURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WorkerTokenServiceType.class)));
    tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkerToken.class, metaDataMap);
  }

  public WorkerToken() {
  }

  public WorkerToken(
    WorkerTokenServiceType serviceType,
    ByteBuffer info,
    ByteBuffer signature)
  {
    this();
    this.serviceType = serviceType;
    this.info = org.apache.thrift.TBaseHelper.copyBinary(info);
    this.signature = org.apache.thrift.TBaseHelper.copyBinary(signature);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkerToken(WorkerToken other) {
    if (other.is_set_serviceType()) {
      this.serviceType = other.serviceType;
    }
    if (other.is_set_info()) {
      this.info = org.apache.thrift.TBaseHelper.copyBinary(other.info);
    }
    if (other.is_set_signature()) {
      this.signature = org.apache.thrift.TBaseHelper.copyBinary(other.signature);
    }
  }

  public WorkerToken deepCopy() {
    return new WorkerToken(this);
  }

  @Override
  public void clear() {
    this.serviceType = null;
    this.info = null;
    this.signature = null;
  }

  /**
   * 
   * @see WorkerTokenServiceType
   */
  public WorkerTokenServiceType get_serviceType() {
    return this.serviceType;
  }

  /**
   * 
   * @see WorkerTokenServiceType
   */
  public void set_serviceType(WorkerTokenServiceType serviceType) {
    this.serviceType = serviceType;
  }

  public void unset_serviceType() {
    this.serviceType = null;
  }

  /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
  public boolean is_set_serviceType() {
    return this.serviceType != null;
  }

  public void set_serviceType_isSet(boolean value) {
    if (!value) {
      this.serviceType = null;
    }
  }

  public byte[] get_info() {
    set_info(org.apache.thrift.TBaseHelper.rightSize(info));
    return info == null ? null : info.array();
  }

  public ByteBuffer buffer_for_info() {
    return org.apache.thrift.TBaseHelper.copyBinary(info);
  }

  public void set_info(byte[] info) {
    this.info = info == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(info, info.length));
  }

  public void set_info(ByteBuffer info) {
    this.info = org.apache.thrift.TBaseHelper.copyBinary(info);
  }

  public void unset_info() {
    this.info = null;
  }

  /** Returns true if field info is set (has been assigned a value) and false otherwise */
  public boolean is_set_info() {
    return this.info != null;
  }

  public void set_info_isSet(boolean value) {
    if (!value) {
      this.info = null;
    }
  }

  public byte[] get_signature() {
    set_signature(org.apache.thrift.TBaseHelper.rightSize(signature));
    return signature == null ? null : signature.array();
  }

  public ByteBuffer buffer_for_signature() {
    return org.apache.thrift.TBaseHelper.copyBinary(signature);
  }

  public void set_signature(byte[] signature) {
    this.signature = signature == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(signature, signature.length));
  }

  public void set_signature(ByteBuffer signature) {
    this.signature = org.apache.thrift.TBaseHelper.copyBinary(signature);
  }

  public void unset_signature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean is_set_signature() {
    return this.signature != null;
  }

  public void set_signature_isSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_TYPE:
      if (value == null) {
        unset_serviceType();
      } else {
        set_serviceType((WorkerTokenServiceType)value);
      }
      break;

    case INFO:
      if (value == null) {
        unset_info();
      } else {
        set_info((ByteBuffer)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unset_signature();
      } else {
        set_signature((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_TYPE:
      return get_serviceType();

    case INFO:
      return get_info();

    case SIGNATURE:
      return get_signature();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_TYPE:
      return is_set_serviceType();
    case INFO:
      return is_set_info();
    case SIGNATURE:
      return is_set_signature();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkerToken)
      return this.equals((WorkerToken)that);
    return false;
  }

  public boolean equals(WorkerToken that) {
    if (that == null)
      return false;

    boolean this_present_serviceType = true && this.is_set_serviceType();
    boolean that_present_serviceType = true && that.is_set_serviceType();
    if (this_present_serviceType || that_present_serviceType) {
      if (!(this_present_serviceType && that_present_serviceType))
        return false;
      if (!this.serviceType.equals(that.serviceType))
        return false;
    }

    boolean this_present_info = true && this.is_set_info();
    boolean that_present_info = true && that.is_set_info();
    if (this_present_info || that_present_info) {
      if (!(this_present_info && that_present_info))
        return false;
      if (!this.info.equals(that.info))
        return false;
    }

    boolean this_present_signature = true && this.is_set_signature();
    boolean that_present_signature = true && that.is_set_signature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_serviceType = true && (is_set_serviceType());
    list.add(present_serviceType);
    if (present_serviceType)
      list.add(serviceType.getValue());

    boolean present_info = true && (is_set_info());
    list.add(present_info);
    if (present_info)
      list.add(info);

    boolean present_signature = true && (is_set_signature());
    list.add(present_signature);
    if (present_signature)
      list.add(signature);

    return list.hashCode();
  }

  @Override
  public int compareTo(WorkerToken other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_serviceType()).compareTo(other.is_set_serviceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_serviceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, other.serviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_info()).compareTo(other.is_set_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_signature()).compareTo(other.is_set_signature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_signature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorkerToken(");
    boolean first = true;

    sb.append("serviceType:");
    if (this.serviceType == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("info:");
    if (this.info == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.info, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signature:");
    if (this.signature == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.signature, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_serviceType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceType' is unset! Struct:" + toString());
    }

    if (!is_set_info()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'info' is unset! Struct:" + toString());
    }

    if (!is_set_signature()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'signature' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkerTokenStandardSchemeFactory implements SchemeFactory {
    public WorkerTokenStandardScheme getScheme() {
      return new WorkerTokenStandardScheme();
    }
  }

  private static class WorkerTokenStandardScheme extends StandardScheme<WorkerToken> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorkerToken struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serviceType = org.apache.storm.generated.WorkerTokenServiceType.findByValue(iprot.readI32());
              struct.set_serviceType_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.info = iprot.readBinary();
              struct.set_info_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readBinary();
              struct.set_signature_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorkerToken struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serviceType != null) {
        oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.serviceType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.info != null) {
        oprot.writeFieldBegin(INFO_FIELD_DESC);
        oprot.writeBinary(struct.info);
        oprot.writeFieldEnd();
      }
      if (struct.signature != null) {
        oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
        oprot.writeBinary(struct.signature);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkerTokenTupleSchemeFactory implements SchemeFactory {
    public WorkerTokenTupleScheme getScheme() {
      return new WorkerTokenTupleScheme();
    }
  }

  private static class WorkerTokenTupleScheme extends TupleScheme<WorkerToken> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorkerToken struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.serviceType.getValue());
      oprot.writeBinary(struct.info);
      oprot.writeBinary(struct.signature);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorkerToken struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.serviceType = org.apache.storm.generated.WorkerTokenServiceType.findByValue(iprot.readI32());
      struct.set_serviceType_isSet(true);
      struct.info = iprot.readBinary();
      struct.set_info_isSet(true);
      struct.signature = iprot.readBinary();
      struct.set_signature_isSet(true);
    }
  }

}

